#include <iostream>
#include <thread>
#include <vector>
using namespace std;

vector<int> merging_arrays(vector<int> left, vector<int> right)   //merging 2 sorted arrays
{
    vector<int> result;
    while (left.size() > 0 && right.size() > 0)
    {
        if (left[0] < right[0])
        {
            result.push_back(left[0]);
            left.erase(left.begin());
        }
        else
        {
            result.push_back(right[0]);
            right.erase(right.begin());
        }
    }

    while (left.size() > 0)
    {
        result.push_back(left[0]);
        left.erase(left.begin());
    }

    while (right.size() > 0)
    {
        result.push_back(right[0]);
        right.erase(right.begin());
    }

    return result;
}

void merge_sort(vector<int>& arr, int start, int end)  //implementin merge sort in a seprate thread
{
    if (start < end)
    {
        int mid = (start + end) / 2;
        vector<int> left(arr.begin() + start, arr.begin() + mid + 1);
        vector<int> right(arr.begin() + mid + 1, arr.begin() + end + 1);

        thread t1(merge_sort, std::ref(left), 0, left.size() - 1);
        thread t2(merge_sort, std::ref(right), 0, right.size() - 1);

        t1.join();
        t2.join();

        arr = merging_arrays(left, right);
    }
}

int main()
{
    int size;
    cout << "Please enter Size of the Array =  ";
    cin >> size;

    cout << endl << "Please enter elements for the Array: " << endl;
    vector<int> array(size);
    for (int i = 0; i < size; i++)
    {
        cout << "Array[" << i << "] = ";
        cin >> array[i];
    }

    thread t(merge_sort, ref(array), 0, array.size() - 1); 
    t.join();

    cout << endl << "Sorted Array: " << endl;
    for (int i = 0; i < size; i++)
    {
        cout << array[i] << " ";
    }
    

  
}
